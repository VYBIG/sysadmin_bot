import asyncio
import logging
import sys
from os import getenv

from aiogram import Bot, Dispatcher, html
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from config import BOT_TOKEN
from kb import *

dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç üëã, {html.bold(message.from_user.full_name)}! –Ø —Å–µ—Ç–µ–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ üí°\n\n"
                         f"–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å‚¨áÔ∏è",
                         reply_markup=main_menu_1)


@dp.callback_query(F.data == 'back_menu_1')
async def button_help(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç üëã, {html.bold(callback.from_user.full_name)}! –Ø —Å–µ—Ç–µ–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ üí°\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å‚¨áÔ∏è",
        reply_markup=main_menu_1)


@dp.callback_query(F.data == 'next_menu_2')
async def button_help(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç üëã, {html.bold(callback.from_user.full_name)}! –Ø —Å–µ—Ç–µ–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ üí°\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å‚¨áÔ∏è",
        reply_markup=main_menu_2)


@dp.message(Command('help'))
async def command_help_handler(message: Message) -> None:
    await message.answer(f"–Ø —Å–µ—Ç–µ–≤–æ–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Å–µ—Ç–µ–≤—ã–º –∏–Ω–∂–µ–Ω–µ—Ä–∞–º\n"
                         f"–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
                         f"- üßæ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ MAC –ê–¥—Ä–µ—Å—É</b>\n"
                         f"- üßÆ <b>IP –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n"
                         f"- ‚ÜîÔ∏è <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ë–∏—Ç –∏ –ë–∞–π—Ç</b>\n"
                         f"- ‚úâÔ∏è <b>ping</b>\n"
                         f"–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ \n\n\n"
                         f"–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞–∂–º–∏ /start")


@dp.message(Command('chat_gpt'))
async def command_help_handler(message: Message) -> None:
    await message.answer(f"–†–µ—à–∏–º –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üîú")


@dp.message(Command('get_id'))
async def command_help_handler(message: Message) -> None:
    await message.answer(f'–¢–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º ID - {message.from_user.id}')


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
