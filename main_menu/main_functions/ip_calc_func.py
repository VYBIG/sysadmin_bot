from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from kb import ip_calc_kb, back_to_ip_calc, back_to_main_menu
from ipaddress import IPv4Address, AddressValueError, \
    IPv4Interface, NetmaskValueError
from .mask_FAQ import mask
from common_functions import main_log

router = Router(name=__name__)


class Ip_calc_state(StatesGroup):
    user_ip_address = State()


def ip_address_type(ip):
    ip = IPv4Interface(ip).ip
    if IPv4Address(ip).is_loopback:
        return 'Loopback –∞–¥—Ä–µ—Å'
    if IPv4Address(ip).is_global:
        return '–ë–µ–ª—ã–π IP'
    if IPv4Address(ip).is_private:
        return '–°–µ—Ä—ã–π IP'
    if IPv4Address(ip).is_reserved:
        return '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP'
    if IPv4Address(ip).is_multicast:
        return '–ú—É–ª—å—Ç–∏–∫–∞—Å—Ç IP'
    else:
        return 'Unknown'


@router.callback_query(Ip_calc_state.user_ip_address, F.data == 'ip_calc_back')
async def ip_calc(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await callback.message.edit_text('–≠—Ç–æ IP –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ\n\n\n'
                                     '–í–≤–µ–¥–∏—Ç–µ IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP/–º–∞—Å–∫–∞ üî¢/üé≠)\n',
                                     reply_markup=ip_calc_kb)


@router.callback_query(F.data == 'ip_calc_back')
async def ip_calc(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.clear()
    await callback.answer(cache_time=1)
    await state.set_state(Ip_calc_state.user_ip_address)
    await callback.message.answer('–≠—Ç–æ IP –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ\n\n\n'
                                  '–í–≤–µ–¥–∏—Ç–µ IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP/–º–∞—Å–∫–∞ üî¢/üé≠)\n',
                                  reply_markup=ip_calc_kb)


@router.callback_query(F.data == 'ip_calc')
async def ip_calc(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer(cache_time=1)
    await state.set_state(Ip_calc_state.user_ip_address)
    main_log(callback=callback)
    await callback.message.answer('–≠—Ç–æ IP –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ\n\n\n'
                                  '–í–≤–µ–¥–∏—Ç–µ IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP/–º–∞—Å–∫–∞ üî¢/üé≠)\n',
                                  reply_markup=ip_calc_kb)


@router.callback_query(Ip_calc_state.user_ip_address, F.data == 'mask_faq')
async def ip_calc_mask(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await callback.message.edit_text(text=mask, reply_markup=back_to_ip_calc)


@router.callback_query(F.data == 'mask_faq')
async def ip_calc_mask(callback: CallbackQuery):
    main_log(callback=callback)
    await callback.message.edit_text(text=mask)


@router.message(Ip_calc_state.user_ip_address,
                ~Command('help', 'start', 'get_id', 'chat_gpt', 'cancel', 'get_log'))
async def ip_calc_state(message: Message, state: FSMContext):
    main_log(message=message)
    if '/' in message.text:
        try:
            ip = IPv4Interface(message.text)
            if str(ip.compressed).split("/")[-1] in ['31', '32']:
                min_ip = list(ip.network.hosts())[0]
                accessible_ip = ip.network.num_addresses
            else:
                min_ip = list(ip.network.hosts())[1]
                accessible_ip = int(ip.network.num_addresses) - 2

            await message.answer(f'<b>–í–∞—à IP –∞–¥—Ä–µ—Å</b> : <code>{ip.ip}</code>\n\n'
                                 f'<b>–¢–∏–ø –≤–∞—à–µ–≥–æ IP</b> : <code>{ip_address_type(ip)}</code>\n\n'
                                 f'<b>–ö–æ—Ä–æ—Ç–∫–∞—è –ú–∞—Å–∫–∞</b> : <code>{str(ip.compressed).split("/")[-1]}</code>\n\n'
                                 f'<b>–î–ª–∏–Ω–Ω–∞—è –ú–∞—Å–∫–∞</b> : <code>{ip.netmask}</code>\n\n'
                                 f'<b>–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Å–∫–∞</b> : <code>{str(ip.with_hostmask).split("/")[-1]}</code>\n\n'
                                 f'<b>–û–±—â–∞—è —Å–µ—Ç—å</b> : <code>{ip.network.network_address}</code>\n\n'
                                 f'<b>–®–ª—é–∑ –ø–æ –£–º–æ–ª—á–∞–Ω–∏—é</b> : <code>{list(ip.network.hosts())[0]}</code>\n\n'
                                 f'<b>–ë—Ä–æ–¥–∫–∞—Å—Ç –∞–¥—Ä–µ—Å</b>: <code>{ip.network.broadcast_address}</code>\n\n'
                                 f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π IP</b> : <code>{min_ip}</code>\n\n'
                                 f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π IP</b> : <code>{list(ip.network.hosts())[-1]}</code>\n\n'
                                 f'<b>–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–µ—Ç–∏</b> : <code>{accessible_ip}'
                                 f'</code>\n\n'
                                 , reply_markup=back_to_main_menu)

        except AddressValueError:
            await message.answer('<b>–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å</b> ‚ÅâÔ∏è\n'
                                 '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:',
                                 reply_markup=back_to_main_menu)
        except NetmaskValueError:
            await message.answer('<b>–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ú–∞—Å–∫–∞</b> ‚ÅâÔ∏è\n'
                                 '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:'
                                 , reply_markup=back_to_main_menu)
    else:
        await message.answer('<b>–ó–∞–ø–∏—Å—å –ê–¥—Ä–µ—Å–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</b> ‚ÅâÔ∏è\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:',
                             reply_markup=back_to_main_menu)
