from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from kb import exit_menu_2, bit_to_byte_table, bit_to_byte_back, bit_to_byte_menu
from common_functions import main_log, bit_to_byte_conferter_func

router = Router(name=__name__)


class B2b_state(StatesGroup):
    from_state = State()
    to_state = State()
    count_state = State()


b_to_by_dict = \
    {'bit': "–ë–∏—Ç", 'byte': "–ë–∞–π—Ç",
     'kbit': "–ö–∏–ª–æ–ë–∏—Ç", 'kbyte': "–ö–∏–ª–æ–ë–∞–π—Ç",
     'mbit': "–ú–µ–≥–∞–ë–∏—Ç", 'mbyte': "–ú–µ–≥–∞–ë–∞–π—Ç",
     'gbit': "–ì–∏–≥–∞–ë–∏—Ç", 'gbyte': "–ì–∏–≥–∞–ë–∞–π—Ç",
     'tbit': "–¢–µ—Ä–∞–ë–∏—Ç", 'tbyte': "–¢–µ—Ä–∞–ë–∞–π—Ç",
     'pbit': "–ü–µ—Ç–∞–ë–∏—Ç", 'pbyte': "–ü–µ—Ç–∞–ë–∞–π—Ç",
     'ebit': "–≠–∫—Å–∞–ë–∏—Ç", 'ebyte': "–≠–∫—Å–∞–ë–∞–π—Ç"}


@router.callback_query(F.data == 'bit_to_byte')
async def from_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.clear()
    await callback.answer(cache_time=1)
    await state.set_state(B2b_state.from_state)
    await callback.message.answer('–≠—Ç–æ –§—É–Ω–∫—Ü–∏—è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ '
                                  '‚ÜîÔ∏è –ë–∏—Ç –≤ –ë–∞–π—Ç\n'
                                  '–ß—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é</b> '
                                  '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                  reply_markup=bit_to_byte_table)


@router.callback_query(F.data == 'btby_back')
async def from_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.clear()
    await callback.answer(cache_time=1)
    await state.set_state(B2b_state.from_state)
    await callback.message.edit_text('–≠—Ç–æ –§—É–Ω–∫—Ü–∏—è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ '
                                     '‚ÜîÔ∏è –ë–∏—Ç –≤ –ë–∞–π—Ç\n'
                                     '–ß—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é</b> '
                                     '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                     reply_markup=bit_to_byte_table)


@router.callback_query(F.data == 'btby_table')
async def from_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.clear()
    await callback.answer(cache_time=1)
    await callback.message \
        .edit_text('üìú –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                   '<blockquote>1 –ë–∏—Ç - –ù–∞–∏–º–µ–Ω—å—à–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n\n'
                   '1 –ë–∞–π—Ç = 8 –ë–∏—Ç\n\n'
                   '1 –ö–∏–ª–æ–±–∞–π—Ç = 1024 –ë–∞–π—Ç\n\n'
                   '1 –ú–µ–≥–∞–±–∞–π—Ç = 1024 –ö–∏–ª–æ–±–∞–π—Ç\n\n'
                   '1 –ì–∏–≥–∞–±–∞–π—Ç = 1024 –ú–µ–≥–∞–±–∞–π—Ç\n\n'
                   '1 –¢–µ—Ä–∞–±–∞–π—Ç = 1024 –ì–∏–≥–∞–±–∞–π—Ç\n\n'
                   '‚Äî‚Äî‚Äî ‚¨áÔ∏è –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ ‚¨áÔ∏è‚Äî‚Äî‚Äî\n\n'
                   '1 –ü–µ—Ç–∞–±–∞–π—Ç = 1024 –¢–µ—Ä–∞–±–∞–π—Ç\n\n'
                   '1 –≠–∫—Å–∞–±–∞–π—Ç = 1024 –≠–∫—Å–∞–±–∞–π—Ç\n\n</blockquote>',
                   reply_markup=bit_to_byte_back)


@router.callback_query(F.data == 'btby_start')
async def from_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.clear()
    await callback.answer(cache_time=1)
    await state.set_state(B2b_state.from_state)
    await callback.message.answer('<b>–ë–∏—Ç ‚ÜîÔ∏è –ë–∞–π—Ç</b>\n\n\n'
                                  '–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —á–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å:',
                                  reply_markup=bit_to_byte_menu)


@router.callback_query(B2b_state.from_state,
                       F.data.in_({'bit', 'byte', 'kbit', 'kbyte',
                                   'mbit', 'mbyte', 'gbit',
                                   'gbyte', 'tbit',
                                   'tbyte', 'pbit',
                                   'pbyte', 'ebit', 'ebyte'}))
async def to_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await state.update_data(from_state=callback.data)
    await callback.answer(cache_time=1)
    await state.set_state(B2b_state.to_state)
    from_data = await state.get_data()
    await callback.message.edit_text(f'<blockquote>‚ÜîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –∏–∑ '
                                     f'{b_to_by_dict[from_data["from_state"]]}</blockquote>\n\n'
                                     '<b>–í—ã–±–µ—Ä–µ—Ç–µ –≤–æ —á—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:</b>', reply_markup=bit_to_byte_menu)


@router.callback_query(B2b_state.to_state,
                       F.data.in_({'bit', 'byte', 'kbit', 'kbyte',
                                   'mbit', 'mbyte', 'gbit',
                                   'gbyte', 'tbit',
                                   'tbyte', 'pbit',
                                   'pbyte', 'ebit', 'ebyte'}))
async def digit_func(callback: CallbackQuery, state: FSMContext):
    main_log(callback=callback)
    await callback.answer(cache_time=1)
    await state.set_state(B2b_state.count_state)
    await state.update_data(to_state=callback.data)
    from_to_data = await state.get_data()
    await callback.message.edit_text('<blockquote>‚ÜîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –∏–∑ '
                                     f'{b_to_by_dict[from_to_data["from_state"]]} –≤ '
                                     f'{b_to_by_dict[from_to_data["to_state"]]}</blockquote>\n\n'
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ:', reply_markup=bit_to_byte_back)


@router.message(B2b_state.count_state,
                ~Command('help', 'start', 'get_id', 'chat_gpt', 'cancel', 'get_log'))
async def bit_to_byte_func(message: Message, state: FSMContext):
    main_log(message=message)
    from_to_data = await state.get_data()
    try:
        float(message.text)
        if float(message.text) <= 0:
            raise ValueError
        await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        the_count = bit_to_byte_conferter_func(float(message.text),
                                               b_to_by_dict[from_to_data["from_state"]],
                                               b_to_by_dict[from_to_data["to_state"]])
        await message.answer(f'<blockquote>‚ÜîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {message.text} '
                             f'{b_to_by_dict[from_to_data["from_state"]]} –≤ '
                             f'{b_to_by_dict[from_to_data["to_state"]]}</blockquote>\n\n'
                             f'–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ : <code>{the_count}</code>'
                             f'<b> {b_to_by_dict[from_to_data["to_state"]]}</b>', reply_markup=bit_to_byte_back)
        await state.clear()
    except ValueError:
        await message.answer('<b>–ß–∏—Å–ª–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> ‚ÅâÔ∏è\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:'
                             , reply_markup=exit_menu_2)


@router.callback_query(F.data.in_({'bit', 'byte', 'kbit', 'kbyte',
                                   'mbit', 'mbyte', 'gbit',
                                   'gbyte', 'tbit',
                                   'tbyte', 'pbit',
                                   'pbyte', 'ebit', 'ebyte'}))
async def unknown_func_btby(callback: CallbackQuery):
    await callback.message.edit_text('–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–≤–Ω–æ –ø–æ–∑–∞–¥–∏ üòê')
