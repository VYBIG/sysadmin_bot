from aiogram import Router
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from kb import back_to_main_menu

router = Router(name=__name__)


@router.message(Command('help'))
async def command_help_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await message.answer(f"–Ø —Å–µ—Ç–µ–≤–æ–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Å–µ—Ç–µ–≤—ã–º –∏–Ω–∂–µ–Ω–µ—Ä–∞–º\n"
                         f"–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
                         f"- üßæ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ MAC –ê–¥—Ä–µ—Å—É</b>\n"
                         f"- üßÆ <b>IP –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n"
                         f"- ‚ÜîÔ∏è <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ë–∏—Ç –∏ –ë–∞–π—Ç</b>\n"
                         f"- ‚úâÔ∏è <b>ping</b>\n"
                         f"–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ \n\n\n"
                         f"–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞–∂–º–∏ /start\n"
                         f"–î–ª—è –û—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ /cancel –∏–ª–∏ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É\n"
                         f"–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä \n"
                         f"–ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–∂–º–µ—Ç–µ /cancel\n"
                         f"–∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=back_to_main_menu)


@router.message(Command('chat_gpt'))
async def command_gpt(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await message.answer(f"–†–µ—à–∏–º –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üîú")


@router.message(Command('get_id'))
async def command_get_id(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await message.answer(f'–¢–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º ID - {message.from_user.id}')


@router.message(Command('cancel'))
async def command_get_id(message: Message, state: FSMContext) -> None:
    if await state.get_state() is None:
        await message.bot.send_chat_action(chat_id=message.chat.id,
                                           action=ChatAction.TYPING)
        await message.answer(f'–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚ö†Ô∏è\n\n'
                             f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é')
    else:
        await state.clear()
        await message.bot.send_chat_action(chat_id=message.chat.id,
                                           action=ChatAction.TYPING)
        await message.answer(f'–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚õîÔ∏è\n\n\n'
                             f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
